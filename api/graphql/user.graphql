type User {
    id: ID!
    organization: Organization!
    password: String!
    first_name: String!
    last_name: String!
    sex: Sex!
    email: String!
    birth_date: Date!
    phone_number: String!
    address: Address!
    roles: [Role!]!
    permission_overrides: [PermissionOverride!]!
    job_title: String!
    supervisor: User
    approval_process: ApprovalProcess!
    groups: [Group!]!
    type_of_employment: TypeOfEmployment!
    paid_time_off_days: Int!
    working_time: Float!
    employed_from: Date!
    employed_to: Date
    available_pto: Int!
    pending_pto: Int!
    transferred_pto: Int!
    transferred_pto_expired_by: Date!
    health_check_expired_by: Date!
    health_and_safety_training_expired_by: Date!
    leave_requests: [LeaveRequest!]!

    hasPermission(name: String!): Boolean! @method
}

enum Sex {
    M
    F
    X
}

enum TypeOfEmployment {
    UoP
    B2B
}

extend type Query {
    users: [User!]! @field(resolver: "App\\GraphQL\\Queries\\UserResolver@users")
}

extend type Mutation {
    updateUser(
        id: ID!,
        first_name: String!,
        last_name: String!,
        sex: Sex!,
        email: String!,
        birth_date: Date!,
        phone_number: String!,
        street_name: String!,
        street_number: String!,
        postal_code: String!,
        city: String!,
        roles: [String]!,
        job_title: String!,
        groups: [String]!,
        supervisor: ID,
        type_of_employment: TypeOfEmployment!,
        paid_time_off_days: Int!,
        working_time: Float!,
        employed_from: Date!,
        employed_to: Date,
        health_check_expired_by: Date!,
        health_and_safety_training_expired_by: Date!
    ) : User! @field(resolver: "App\\GraphQL\\Mutations\\UserMutator@updateUser")
}
